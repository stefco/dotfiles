#!/bin/bash
# (c) Stefan Countryman 2017
# quicklook at files.

help () {
    cat <<"__EOF__"
USAGE: ql file1 [file2 ... fileN]

Open a MacOS preview of one or more files. Exit the preview as you usually
would by tapping space. Works on remote servers through SSH and caches files
locally; will therefore lag roughly proportionally to how much data you are
trying to preview. In this sense it is not technically any different than
downloading files and previewing them locally, though it is certainly easier.

Locally cached files will be stored in ~/.quicklook_cache/${HOSTNAME}/${PATH},
where ${HOSTNAME} is the name of the host (as returned by the `hostname`
executable) and ${PATH} is the path to the file without resolving any symlinks,
i.e. what you would get from running `pwd` in the `dirname` of the file fed to
`ql`.

Note that this will fail if your remote has `hostname` set to something besides
its URL or the name you use in your ssh_config. This is a bug. Too lazy to
fix it right now.

Copying is done in the background using `rsync` to try to avoid redundant
copies; an attempt is always made to use `rsync -R` to try to avoid out of date
caching and to preserve directory structure. note that soft and hard links
will not be resolved, so you can easily end up with redundant copies if your
use case is exotic and your files exist as many different paths resolving to
the same inodes.

Also note that the SSH version of this feature requires iTerm2 with a profile
set up to listen for a trigger. The trigger string matches the following
ICU <http://userguide.icu-project.org/strings/regexp> regular expression:

^YouAreAlreadyDead;Url=(.*);PathsToRsync=(.* __EndOfFile__)

This will run some sort of program on the client to `rsync` the specified
directories. You can therefore print a list of paths to a file, each within
single quotes, ending with "__EndOfFile__", like so:

printf 'YouAreAlreadyDead;Url=%s;PathsToRsync=%s __EndOfFile__' \
    "username@example.com" \
    "'path1' 'path 2' 'another path to a file.txt'"

etc.

Finally, note that rsync will only work with GSISSH hosts if the
ControlMaster and ControlPath SSH config opitons are set so that the existing
gsissh session can be used with regular ssh connections for rsync without
further configuration. See:

https://www.anchor.com.au/blog/2010/02/ssh-controlmaster-the-good-the-bad-the-ugly/
__EOF__
}

if [[ $1 == -h ]]; then
    help
    exit 1
fi

print_escaped_paths () {
    # take user@hostname as first argument followed by paths to sync
    printf '\nYouAreAlreadyDead;Url=%s;PathsToRsync=' "$1"
    shift
    while [ $# -gt 0 ]; do
        printf "'%s' " "${@:1:1}"
        shift
    done
    printf '__EndOfFile__\n'
}

# get the paths to files provided as arguments to this script
readlinks () {
    for f in "$@"; do
        fpath="$(cd "$(dirname "$f")" && pwd)"/"$(basename "$f")"
        echo "${fpath}"
    done
}

# get the user@hostname for this server
url () {
    printf '%s' "$(whoami)"@"$(hostname)"
}

if [[ $SESSION_TYPE == remote/ssh ]]; then
    echo "quick look not yet enabled."
    # only split on newlines
    old_IFS="$IFS"
    IFS=$'\n'
    # this next command should trigger ql_download on the client machine
    print_escaped_paths $(url) $(readlinks "$@")
    # return to default IFS behavior
    IFS="$old_IFS"
elif [[ $OSTYPE == darwin* ]]; then
    qlmanage -p 1>/dev/null 2>&1 "$@"
    open -a iTerm
else
    echo >&2 "Sorry, quicklook requires you to either use iTerm.app in an SSH"
    echo >&2 "session or to run locally on a Mac in any terminal emulator."
fi
