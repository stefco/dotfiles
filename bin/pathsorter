#!/usr/bin/env python
# (c) Stefan Countryman 2017
# read in the current environment PATH and spit out a reordered one to STDOUT
import os
import sys

pathchoices = {
    "port": [
        "/opt/local/bin",
        "/opt/local/sbin",
        "/opt/local/libexec/gnubin",
    ],
    "py34": "/opt/local/Library/Frameworks/Python.framework/Versions/3.4/bin",
    "py35": "/opt/local/Library/Frameworks/Python.framework/Versions/3.5/bin",
    "py27": "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin",
    "py36": "/opt/local/Library/Frameworks/Python.framework/Versions/3.6/bin",
    "py37": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/bin",
    "pyuser": os.path.expanduser("~/.local/bin"),
    "py37usermac": os.path.expanduser("~/Library/Python/3.7/bin"),
    "py36usermac": os.path.expanduser("~/Library/Python/3.6/bin"),
    "py35usermac": os.path.expanduser("~/Library/Python/3.5/bin"),
    "py34usermac": os.path.expanduser("~/Library/Python/3.4/bin"),
    "py27usermac": os.path.expanduser("~/Library/Python/2.7/bin"),
    "conda2": [
        os.path.expanduser("~/anaconda2/bin"),
        os.path.expanduser("~/miniconda2/bin"),
    ],
    "conda3": [
        os.path.expanduser("~/anaconda3/bin"),
        os.path.expanduser("~/miniconda3/bin"),
    ],
    "intel": os.path.expanduser("~/anaconda2/bin"),
    "mactex": "/Library/TeX/Distributions/Programs/texbin",
    "macvim": "/Applications/MacPorts/MacVim.app/Contents/bin",
    "user": [
        os.path.expanduser("~/bin"),
        os.path.expanduser("~/dev/dotfiles/linkfiles/.iterm2"),
    ],
    "sys": [
        "/usr/bin",
        "/usr/local/bin",
        "/bin",
        "/usr/sbin",
        "/sbin"
    ],
}

def errexit():
    sys.stderr.write("BAD INPUT: Must pick from following keys:\n")
    sys.stderr.write("  " + "\n  ".join(pathchoices.keys()) + "\n")
    exit(1)

if len(sys.argv) == 1 or '-h' in sys.argv:
    errexit()

path = os.environ["PATH"].split(":")

for pathchoice in sys.argv[-1:0:-1]:
    try:
        chosenpaths = pathchoices[pathchoice]
        if isinstance(chosenpaths, str):
            chosenpaths = [chosenpaths]
    except KeyError:
        errexit()

    # remove duplicate paths
    newpath = list()
    for i in range(len(path)):
        if not path[i] in path[:i]:
            newpath.append(path[i])

    # move chosen paths to front
    for chosenpath in chosenpaths[::-1]:
        if chosenpath in newpath:
            newpath.remove(chosenpath)
        newpath.insert(0, chosenpath)

    # newpath is our new path
    path = newpath

# print the final path variable
print(":".join(newpath))
