#!/usr/bin/env python
# (c) Stefan Countryman, 2017
# Recipes for backing up various files

import textwrap
import datetime
import tarfile
import sys
import os

DESC = """USAGE: backup option1 [option2 ... optionN]

Make snapshot backups of various configuration files to pre-configured
locations for safekeeping.

OPTIONS:
"""
HELP_INDENT = 12

def help():
    """Print help string."""
    print(DESC)
    # print("")
    for option in backup_funcs.keys():
        # leave space at beginning for option name plus a colon
        initial_indent = (HELP_INDENT - len(option) - 1) * ' '
        helpstr = textwrap.fill(
            backup_funcs[option].__doc__,
            initial_indent = initial_indent,
            subsequent_indent = HELP_INDENT*' '
        )
        print("{}:{}".format(option, helpstr))

# a variable for storing the functions we will use to back up files; we will
# add each function to this dict and use it to print a help string at the
# command line if necessary.
backup_funcs = dict()

def zotero():
    """Back up a timestamped zip file of your Zotero bibliography library to
    ~/Dropbox/zotero-backup."""
    zotero_lib = os.path.expanduser("~/Zotero")
    zotero_backup_dir = os.path.expanduser("~/Dropbox/zotero-backup")
    zotero_snapshot_path = os.path.join(
        zotero_backup_dir,
        "{}-zotero.tar.gz".format(datetime.datetime.utcnow().isoformat())
    )
    with tarfile.open(zotero_snapshot_path, "w:gz") as snapshot:
        snapshot.add(zotero_lib)
    print("Successfully backed up Zotero.")
backup_funcs["zotero"] = zotero

# display help string if necessary
if "-h" in sys.argv[1:] or "--help" in sys.argv[1:] or len(sys.argv) == 1:
    help()
    exit()

# perform any necessary backups
for option in sys.argv[1:]:
    try:
        backup_funcs[option]()
    except KeyError:
        sys.stderr.write("Not a valid backup option: {}\n\n".format(option))
        help()
        exit(1)
