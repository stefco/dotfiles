#!/bin/bash
# (c) Stefan Countryman 2017-2018
# If a command corresponds to a file, open that file for editing in vim.

_reload_function_declaration () {
    while true; do
        read -p "Function edited, reload? (y/n): " -n 1 choice
        echo
        case "$choice" in
            y|Y )
                echo "reloading."
                source "$1"
                return $?
                ;;
            n|N ) echo "not reloading." && return;;
            * ) echo "invalid, please type 'y' or 'n'.";;
        esac
    done
}

vimex () {
    local cmdtype
    # vimargs should be arguments passed to vim; the first of them should be
    # the filename to edit.
    local vimargs
    local posthook
    local md5_pre

    # a command to run after saving the file (if changes were made)
    posthook=(true)

    if ! cmdtype="$(type 2>/dev/null "$1")"; then
        echo >&2 "Command not found."
        return 1
    elif [[ $cmdtype == "$1 is aliased to"* ]]; then
        if [ -e "${_alias_sources["$1"]}" ]; then
            vimargs=("${_alias_sources["$1"]}" "+/alias $1=")
            posthook=(_reload_function_declaration "${vimargs[0]}")
        else
            echo >&2 "Command is an alias; can't find where it's defined."
            return 2
        fi
    elif [[ $cmdtype == "$1 is a function"* ]]; then
        if [ -e "${_func_sources["$1"]}" ]; then
            vimargs=("${_func_sources["$1"]}" "+/$1 *(*) *\n*{")
            posthook=(_reload_function_declaration "${vimargs[0]}")
        else
            echo >&2 "Command is a function; can't find where it's defined."
            return 3
        fi
    elif [[ $cmdtype == "$1 is a shell builtin"* ]]; then
        echo >&2 "Command is a shell builtin, cannot edit."
        return 4
    elif [[ $cmdtype == "$1 is hashed ("* ]]; then
        tmp="${cmdtype#$1 is hashed (}"
        vimargs=("${tmp%)}")
    else
        vimargs=("${cmdtype#$1 is }")
    fi
    md5_pre="$(md5sum "${vimargs[0]}")"
    if vim "${vimargs[@]}" && [[ $md5_pre != "$(md5sum "${vimargs[0]}")" ]]
    then
        ${posthook[@]}
    fi
}

# `vimex` autocompletion; http://www.tldp.org/LDP/abs/html/tabexpansion.html
# details on `complete` and `compgen` builtins:
# https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html
complete -c vimex
