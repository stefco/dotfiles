#!/bin/bash
# (c) Stefan Countryman 2017
# commands for generating a nice command prompt along with conditional
# command prompt setting based on environment.

PID=$$

# command prompt, modified from http://ezprompt.net/
function nonzero_return() {
    RETVAL=$?
    [ $RETVAL -ne 0 ] && echo " $RETVAL"
}
# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        # STAT=`parse_git_dirty`
        # echo " î‚  ${BRANCH}${STAT} "
        # echo "î‚° î‚  ${BRANCH} "
        echo "î‚± î‚  ${BRANCH} "
    else
        # end it with the same color as the rest of the prompt line
        echo ''
    fi
}
# add a divider if there is no git branch
function no_branch() {
    # set git branch globally so we don't have to check many times
    BRANCH_NOW="`parse_git_branch`"
    printf '%s' "${BRANCH_NOW}" >~/.prompt_branch.${PID}
    if [ "${BRANCH_NOW}" == "" ]; then
        echo 'î‚°'
    else
        echo ''
    fi
}
function git_branch_with_div() {
    # look up the branch name, found in `no_branch`; don't recalculate
    BRANCH_NOW="`cat ~/.prompt_branch.${PID}`"
    echo "${BRANCH_NOW}"
}
function yes_branch() {
    BRANCH_NOW="`cat ~/.prompt_branch.${PID}`"
    if [ "${BRANCH_NOW}" == "" ]; then
        echo ''
    else
        echo 'î‚°'
    fi
    rm ~/.prompt_branch.${PID}
}
# get current status of git repo
function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}
# get the last exit status; if nonzero, print it out
function print_bad_exit_status {
    exitcode="$?"
    if [[ $exitcode != 0 ]]; then
        printf '%s' " ðŸ–•  $exitcode "
    fi
}

# set the actual command prompt variable based on the host
if [[ $OSTYPE == darwin* ]]; then
    if [ $(hostname) == 'Alexis-Nelsons-MacBook-Pro.local' ]; then
        export PS1='\[\e[37;45m\]`print_bad_exit_status`\[\e[m\]\[\e[41m\] ${#NAVIGATION_BWD[@]}:${#NAVIGATION_FWD[@]} \[\e[m\]\[\e[31;47m\]î‚°\[\e[m\]\[\e[m\]\[\e[30;47m\] \w \[\e[31m\]`parse_git_branch`\[\e[m\]\[\e[37m\]î‚°\[\e[m\] '
    elif [ $(hostname) == 'Stefans-iMac.local' ]; then
        export PS1='\[\e[37;45m\]`print_bad_exit_status`\[\e[m\]\[\e[44m\] ${#NAVIGATION_BWD[@]}:${#NAVIGATION_FWD[@]} \[\e[m\]\[\e[34;47m\]î‚°\[\e[m\]\[\e[m\]\[\e[30;47m\] \w \[\e[m\]\[\e[37m\]î‚°\[\e[m\] '
    fi
fi
